// ------------------------------------------------------------------------------

//  <auto-generated>

//      This code was generated by SpecFlow (http://www.specflow.org/).

//      SpecFlow Version:1.7.0.0

//      SpecFlow Generator Version:1.7.0.0

//      Runtime Version:4.0.30319.237

// 

//      Changes to this file may cause incorrect behavior and will be lost if

//      the code is regenerated.

//  </auto-generated>

// ------------------------------------------------------------------------------

#region Designer generated code

namespace Nrk.OnDemand.Common.AcceptanceTests.Features

{

    using TechTalk.SpecFlow;

    

    

    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]

    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]

    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]

    public partial class ReceiveVODPatternsFromPRFFeature

    {

        

        private static TechTalk.SpecFlow.ITestRunner testRunner;

        

#line 1 "Receive VOD patterns from PRF.feature"

#line hidden

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]

        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)

        {

            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();

            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Receive VOD patterns from PRF", "In order to update ODA with VOD patterns\r\nAs a VOD pattern consumer\r\nI want to re" +

                    "ceive VOD patterns and store them in ODA database", ProgrammingLanguage.CSharp, new string[] {

                        "MediaGeniX"});

            testRunner.OnFeatureStart(featureInfo);

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]

        public static void FeatureTearDown()

        {

            testRunner.OnFeatureEnd();

            testRunner = null;

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]

        public virtual void TestInitialize()

        {

            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 

                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Receive VOD patterns from PRF")))

            {

                Nrk.OnDemand.Common.AcceptanceTests.Features.ReceiveVODPatternsFromPRFFeature.FeatureSetup(null);

            }

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]

        public virtual void ScenarioTearDown()

        {

            testRunner.OnScenarioEnd();

        }

        

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)

        {

            testRunner.OnScenarioStart(scenarioInfo);

        }

        

        public virtual void ScenarioCleanup()

        {

            testRunner.CollectScenarioErrors();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new VOD pattern for a TV program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void CreateANewVODPatternForATVProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new VOD pattern for a TV program", ((string[])(null)));

#line 7

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {

                        "PiProgId",

                        "Medium"});

            table1.AddRow(new string[] {

                        "NNFA20400099",

                        "tv"});

#line 8

 testRunner.Given("ODA database contains program data", ((string)(null)), table1);

#line 11

 testRunner.But("ODA database does not contain fileset parts with carrier \"NNFA20400099AA\"");

#line 12

 testRunner.And("ODA database does not contain files for fileset parts with carrier \"NNFA20400099A" +

                    "A\"");

#line 13

 testRunner.And("ODA database does not contain rights with pattern \"83223739100\"");

#line hidden

            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime",

                        "TitleLong",

                        "SummaryMedium",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table2.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01",

                        "Head title",

                        "Drama series",

                        "NNFA20400099AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 14

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table2);

#line 17

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table3.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01"});

#line 18

 testRunner.And("ODA database should contain rights for program \"NNFA20400099\"", ((string)(null)), table3);

#line hidden

            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "PartNumber",

                        "Priority",

                        "Deactivated"});

            table4.AddRow(new string[] {

                        "NNFA20400099AA",

                        "1",

                        "1",

                        "False"});

#line 21

 testRunner.And("ODA database should contain fileset parts for program \"NNFA20400099\"", ((string)(null)), table4);

#line hidden

            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "Platform",

                        "TranscodingStatus"});

            table5.AddRow(new string[] {

                        "NNFA20400099AA",

                        "web",

                        "100"});

#line 24

 testRunner.And("ODA database should contain transcoding information for program \"NNFA20400099\"", ((string)(null)), table5);

#line hidden

            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {

                        "FileName",

                        "Profile"});

            table6.AddRow(new string[] {

                        "NNFA20400099AA_ID180.mp4",

                        "ID180"});

            table6.AddRow(new string[] {

                        "NNFA20400099AA_ID270.mp4",

                        "ID270"});

            table6.AddRow(new string[] {

                        "NNFA20400099AA_ID360.mp4",

                        "ID360"});

            table6.AddRow(new string[] {

                        "NNFA20400099AA_ID540.mp4",

                        "ID540"});

            table6.AddRow(new string[] {

                        "NNFA20400099AA_ID720.mp4",

                        "ID720"});

#line 27

 testRunner.And("ODA database should contain files for fileset parts with carrier \"NNFA20400099AA\"" +

                    "", ((string)(null)), table6);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new VOD pattern for a radio program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void CreateANewVODPatternForARadioProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new VOD pattern for a radio program", ((string[])(null)));

#line 35

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {

                        "PiProgId",

                        "Medium"});

            table7.AddRow(new string[] {

                        "MUHR01006611",

                        "radio"});

#line 36

 testRunner.Given("ODA database contains program data", ((string)(null)), table7);

#line 39

 testRunner.But("ODA database does not contain fileset parts with carrier \"MUHR01006611AA\"");

#line 40

 testRunner.And("ODA database does not contain rights with pattern \"83223739200\"");

#line hidden

            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime",

                        "TitleLong",

                        "SummaryMedium",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table8.AddRow(new string[] {

                        "NewOrUpdate",

                        "MUHR01006611",

                        "83223739200",

                        "2010-11-01",

                        "2010-12-01",

                        "Radio title",

                        "Drama series",

                        "MUHR01006611AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 41

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table8);

#line 44

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table9.AddRow(new string[] {

                        "83223739200",

                        "2010-11-01",

                        "2010-12-01"});

#line 45

 testRunner.And("ODA database should contain rights for program \"MUHR01006611\"", ((string)(null)), table9);

#line hidden

            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "PartNumber",

                        "Priority",

                        "Deactivated"});

            table10.AddRow(new string[] {

                        "MUHR01006611AA",

                        "1",

                        "1",

                        "False"});

#line 48

 testRunner.And("ODA database should contain fileset parts for program \"MUHR01006611\"", ((string)(null)), table10);

#line hidden

            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "Platform",

                        "TranscodingStatus"});

            table11.AddRow(new string[] {

                        "MUHR01006611AA",

                        "web",

                        "100"});

#line 51

 testRunner.And("ODA database should contain transcoding information for program \"MUHR01006611\"", ((string)(null)), table11);

#line 54

 testRunner.And("ODA database should not contain files for fileset parts with carrier \"MUHR0100661" +

                    "1AA\"");

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Reject a VOD pattern for a non-existing TV program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void RejectAVODPatternForANon_ExistingTVProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reject a VOD pattern for a non-existing TV program", ((string[])(null)));

#line 56

this.ScenarioSetup(scenarioInfo);

#line 57

 testRunner.Given("ODA database does not contain program \"NNFA20400099\"");

#line hidden

            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime",

                        "TitleLong",

                        "SummaryMedium",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table12.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01",

                        "Head title",

                        "Drama series",

                        "NNFA20400099AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 58

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table12);

#line 61

 testRunner.Then("MgxGranitt adapter service should return fail");

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Reject a VOD pattern for a non-existing radio program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void RejectAVODPatternForANon_ExistingRadioProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reject a VOD pattern for a non-existing radio program", ((string[])(null)));

#line 63

this.ScenarioSetup(scenarioInfo);

#line 64

 testRunner.Given("ODA database does not contain program \"MUHR01006611\"");

#line hidden

            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime",

                        "TitleLong",

                        "SummaryMedium",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table13.AddRow(new string[] {

                        "NewOrUpdate",

                        "MUHR01006611",

                        "83223739200",

                        "2010-11-01",

                        "2010-12-01",

                        "Radio title",

                        "Drama series",

                        "MUHR01006611AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 65

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table13);

#line 68

 testRunner.Then("MgxGranitt adapter service should return fail");

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create title and description for a TV program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void CreateTitleAndDescriptionForATVProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create title and description for a TV program", ((string[])(null)));

#line 70

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {

                        "PiProgId",

                        "Medium"});

            table14.AddRow(new string[] {

                        "NNFA20400099",

                        "tv"});

#line 71

 testRunner.Given("ODA database does not contain program data", ((string)(null)), table14);

#line hidden

            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {

                        "PiProgId",

                        "Medium"});

            table15.AddRow(new string[] {

                        "NNFA20400099",

                        "tv"});

#line 74

 testRunner.And("ODA database contains program data", ((string)(null)), table15);

#line 77

 testRunner.And("ODA database does not contain fileset parts with carrier \"NNFA20400099AA\"");

#line hidden

            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime",

                        "TitleLong",

                        "SummaryMedium",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table16.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01",

                        "Head title",

                        "Drama series",

                        "NNFA20400099AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 78

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table16);

#line 81

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {

                        "Title",

                        "TitlesGroupType",

                        "Label",

                        "Purpose",

                        "Reference",

                        "Restriction"});

            table17.AddRow(new string[] {

                        "Head title",

                        "secondaryTitle",

                        "onDemand",

                        "web",

                        "MGX",

                        "public"});

#line 82

 testRunner.And("ODA database should contain titles for program \"NNFA20400099\"", ((string)(null)), table17);

#line hidden

            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {

                        "Abstract",

                        "Purpose",

                        "Reference",

                        "Restriction"});

            table18.AddRow(new string[] {

                        "Drama series",

                        "shortDescription",

                        "MGX",

                        "public"});

#line 85

 testRunner.And("ODA database should contain descriptions for program \"NNFA20400099\"", ((string)(null)), table18);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new VOD pattern for an existing TV program")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void CreateANewVODPatternForAnExistingTVProgram()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new VOD pattern for an existing TV program", ((string[])(null)));

#line 89

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table19.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01"});

#line 90

 testRunner.Given("ODA database contains rights for program \"NNFA20400099\"", ((string)(null)), table19);

#line 93

 testRunner.But("ODA database does not contain rights with pattern \"83223739111\"");

#line hidden

            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime"});

            table20.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739111",

                        "2010-11-11",

                        "2010-12-11"});

#line 94

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table20);

#line 97

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table21.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01"});

            table21.AddRow(new string[] {

                        "83223739111",

                        "2010-11-11",

                        "2010-12-11"});

#line 98

 testRunner.And("ODA database should contain rights for program \"NNFA20400099\"", ((string)(null)), table21);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new VOD pattern for existing subtitles")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void CreateANewVODPatternForExistingSubtitles()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new VOD pattern for existing subtitles", ((string[])(null)));

#line 103

this.ScenarioSetup(scenarioInfo);

#line 104

 testRunner.Given("ODA database contains program \"NNFA20400099\"");

#line 105

 testRunner.And("ODA database does not contain fileset parts with carrier \"NNFA20400099AA\"");

#line hidden

            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {

                        "Title",

                        "PiProgId",

                        "CarrierId",

                        "Language"});

            table22.AddRow(new string[] {

                        "Subtitle 123",

                        "NNFA20400099",

                        "NNFA20400099AA",

                        "NOR"});

            table22.AddRow(new string[] {

                        "Subtitle 456",

                        "NNFA20400099",

                        "NNFA20400099AA",

                        "TTV"});

#line 106

 testRunner.But("ODA database contains subtitles", ((string)(null)), table22);

#line hidden

            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "MasterSourceId"});

            table23.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "NNFA20400099AA"});

#line 110

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table23);

#line 113

 testRunner.Then("MgxGranitt adapter service should return OK");

#line 114

 testRunner.And("ODA database should contain program \"NNFA20400099\"");

#line hidden

            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {

                        "Title",

                        "CarrierId",

                        "Language"});

            table24.AddRow(new string[] {

                        "Subtitle 123",

                        "NNFA20400099AA",

                        "NOR"});

            table24.AddRow(new string[] {

                        "Subtitle 456",

                        "NNFA20400099AA",

                        "TTV"});

#line 115

 testRunner.And("ODA database should contain subtitles for program \"NNFA20400099\"", ((string)(null)), table24);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update rights for an existing VOD pattern")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void UpdateRightsForAnExistingVODPattern()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update rights for an existing VOD pattern", ((string[])(null)));

#line 120

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table25.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "2010-12-01"});

#line 121

 testRunner.Given("ODA database contains rights for program \"NNFA20400099\"", ((string)(null)), table25);

#line hidden

            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime"});

            table26.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "2010-11-11",

                        "2010-12-11"});

#line 124

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table26);

#line 127

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table27.AddRow(new string[] {

                        "83223739100",

                        "2010-11-11",

                        "2010-12-11"});

#line 128

 testRunner.And("ODA database should contain rights for program \"NNFA20400099\"", ((string)(null)), table27);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update transcoding status for an existing VOD pattern")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void UpdateTranscodingStatusForAnExistingVODPattern()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update transcoding status for an existing VOD pattern", ((string[])(null)));

#line 132

this.ScenarioSetup(scenarioInfo);

#line 133

 testRunner.Given("ODA database contains program \"NNFA20400099\"");

#line hidden

            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "Platform",

                        "TranscodingStatus"});

            table28.AddRow(new string[] {

                        "NNFA20400099AA",

                        "web",

                        "2"});

#line 134

 testRunner.And("ODA database contains transcoding information for program \"NNFA20400099\"", ((string)(null)), table28);

#line hidden

            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "MasterSourceId",

                        "TranscodingDomain",

                        "TranscodingStatus",

                        "Platform"});

            table29.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "NNFA20400099AA",

                        "NARK",

                        "Finished",

                        "WEB"});

#line 137

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table29);

#line 140

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {

                        "CarrierId",

                        "Platform",

                        "TranscodingStatus"});

            table30.AddRow(new string[] {

                        "NNFA20400099AA",

                        "web",

                        "100"});

#line 141

 testRunner.And("ODA database should contain transcoding information for program \"NNFA20400099\"", ((string)(null)), table30);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a VOD pattern")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void DeleteAVODPattern()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a VOD pattern", ((string[])(null)));

#line 145

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table31.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "@tomorrow"});

#line 146

 testRunner.Given("ODA database contains rights for program \"NNFA20400099\"", ((string)(null)), table31);

#line hidden

            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id"});

            table32.AddRow(new string[] {

                        "Delete",

                        "NNFA20400099",

                        "83223739100"});

#line 149

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table32);

#line 152

 testRunner.Then("MgxGranitt adapter service should return OK");

#line hidden

            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {

                        "VodPatternId",

                        "PublishStart",

                        "PublishEnd"});

            table33.AddRow(new string[] {

                        "83223739100",

                        "2010-11-01",

                        "@today"});

#line 153

 testRunner.And("ODA database should contain rights for program \"NNFA20400099\"", ((string)(null)), table33);

#line hidden

            this.ScenarioCleanup();

        }

        

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]

        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send an invalid VOD pattern")]

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Receive VOD patterns from PRF")]

        public virtual void SendAnInvalidVODPattern()

        {

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send an invalid VOD pattern", ((string[])(null)));

#line 157

this.ScenarioSetup(scenarioInfo);

#line hidden

            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {

                        "ChangeType",

                        "AlternateId",

                        "Id",

                        "StartDateTime",

                        "EndDateTime"});

            table34.AddRow(new string[] {

                        "NewOrUpdate",

                        "NNFA20400099",

                        "83223739100",

                        "",

                        ""});

#line 158

 testRunner.When("MgxGranitt adapter service receives pattern with data", ((string)(null)), table34);

#line 161

 testRunner.Then("MgxGranitt adapter service should return fail");

#line hidden

            this.ScenarioCleanup();

        }

    }

}

#endregion